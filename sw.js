(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),i=(...e)=>console.error("[ServiceWorker]",...e);let a=null;self.addEventListener("fetch",e=>{const o=e,l=new URL(o.request.url);if(t("リクエスト受信:",o.request.method,l.pathname),o.request.method==="POST"&&(l.pathname.endsWith("/upload")||l.pathname.includes("/ehagaki/upload"))){t("画像アップロードリクエストを受信しました",l.pathname),o.respondWith((async()=>{try{t("フォームデータを処理中...");const s=(await o.request.formData()).get("image");if(!s)return i("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",s.name,`タイプ: ${s.type}`,`サイズ: ${Math.round(s.size/1024)}KB`),a={image:s,metadata:{name:s.name,type:s.type,size:s.size,timestamp:new Date().toISOString()}};const d=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(d.length>0){const r=d[0];t("既存のクライアントにフォーカス:",r.id);try{return await r.focus(),r.postMessage({type:"SHARED_IMAGE",data:a}),t("クライアントに画像データを送信しました"),setTimeout(()=>{try{r.postMessage({type:"SHARED_IMAGE",data:a}),t("画像データ再送信（1回目）")}catch(n){i("再送信エラー:",n)}},1e3),setTimeout(()=>{try{r.postMessage({type:"SHARED_IMAGE",data:a}),t("画像データ再送信（2回目）")}catch(n){i("再送信エラー:",n)}},2e3),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}catch(n){return i("メッセージ送信エラー:",n),Response.redirect(new URL("/ehagaki/?error=messaging",self.location.origin).href,303)}}else{t("クライアントがないので新規ウィンドウを開きます");try{return await self.clients.openWindow(new URL("/ehagaki/?shared=true",self.location.origin).href)?(t("新しいウィンドウを開きました"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)):(i("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?error=window",self.location.origin).href,303))}catch(r){return i("ウィンドウオープンエラー:",r),Response.redirect(new URL("/ehagaki/?error=openWindow",self.location.origin).href,303)}}}catch(c){return i("画像処理エラー:",c),Response.redirect(new URL("/ehagaki/?error=processing",self.location.origin).href,303)}})());return}}),self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{if(t("メッセージ受信:",e.data),e.data&&e.data.type==="SKIP_WAITING"){t("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}e.data&&e.data.action==="getSharedImage"&&(t("クライアントに共有画像データを送信"),a?(e.ports&&e.ports[0]?(e.ports[0].postMessage({type:"SHARED_IMAGE",data:a}),t("MessageChannelでデータを送信")):(e.source.postMessage({type:"SHARED_IMAGE",data:a}),t("通常の応答でデータを送信")),t("送信したデータ:",a.metadata),setTimeout(()=>{a=null,t("共有画像キャッシュをクリアしました")},3e4)):(t("共有画像キャッシュがありません"),e.ports&&e.ports[0]?e.ports[0].postMessage({type:"SHARED_IMAGE",data:null}):e.source&&e.source.postMessage({type:"SHARED_IMAGE",data:null})))})})();
