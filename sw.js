(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),c=(...e)=>console.error("[ServiceWorker]",...e);let n=null;self.addEventListener("fetch",e=>{const a=e,s=new URL(a.request.url);if(t("リクエスト受信:",a.request.method,s.pathname),a.request.method==="POST"&&(s.pathname.endsWith("/upload")||s.pathname.includes("/ehagaki/upload"))){t("画像アップロードリクエストを受信しました",s.pathname),a.respondWith((async()=>{try{t("フォームデータを処理中...");const o=(await a.request.formData()).get("image");if(!o)return c("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",o.name,`タイプ: ${o.type}`,`サイズ: ${Math.round(o.size/1024)}KB`),n={image:o,metadata:{name:o.name,type:o.type,size:o.size,timestamp:new Date().toISOString()}};try{await u(),t("IndexedDBに共有フラグを保存しました")}catch(r){c("IndexedDB保存エラー:",r)}const p=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(p.length>0){const r=p[0];t("既存のクライアントにフォーカス:",r.id);try{return await r.focus(),r.postMessage({type:"SHARED_IMAGE",data:n,timestamp:Date.now()}),t("クライアントに画像データを送信しました"),setTimeout(()=>{try{r.postMessage({type:"SHARED_IMAGE",data:n,timestamp:Date.now(),retry:1}),t("画像データ再送信（1回目）")}catch(i){c("再送信エラー:",i)}},1e3),setTimeout(()=>{try{r.postMessage({type:"SHARED_IMAGE",data:n,timestamp:Date.now(),retry:2}),t("画像データ再送信（2回目）")}catch(i){c("再送信エラー:",i)}},2e3),Response.redirect(new URL("/ehagaki/?shared=true",self.location.origin).href,303)}catch(i){return c("メッセージ送信エラー:",i),Response.redirect(new URL("/ehagaki/?shared=true&error=messaging",self.location.origin).href,303)}}else{t("クライアントがないので新規ウィンドウを開きます");try{const r=new URL("/ehagaki/?shared=true",self.location.origin).href;return t("新規ウィンドウを開きます:",r),await self.clients.openWindow(r)?(t("新しいウィンドウを開きました"),new Response("",{status:200,headers:{"Content-Type":"text/plain"}})):(c("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?shared=true&error=window",self.location.origin).href,303))}catch(r){return c("ウィンドウオープンエラー:",r),Response.redirect(new URL("/ehagaki/?shared=true&error=openWindow",self.location.origin).href,303)}}}catch(l){return c("画像処理エラー:",l),Response.redirect(new URL("/ehagaki/?shared=true&error=processing",self.location.origin).href,303)}})());return}});async function u(){return new Promise((e,a)=>{try{const s=indexedDB.open("eHagakiSharedData",1);s.onupgradeneeded=d=>{const l=d.target.result;l.objectStoreNames.contains("flags")||l.createObjectStore("flags",{keyPath:"id"})},s.onerror=d=>{a(new Error("IndexedDB open failed"))},s.onsuccess=d=>{try{const p=d.target.result.transaction(["flags"],"readwrite").objectStore("flags"),r={id:"sharedImage",timestamp:Date.now(),value:!0},i=p.put(r);i.onsuccess=()=>{e()},i.onerror=g=>{a(new Error("Failed to store shared flag"))}}catch(l){a(l)}}}catch(s){a(s)}})}self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{const a=e.source;if(t("メッセージ受信:",e.data?.action,"from client:",a?.id),e.data&&e.data.type==="SKIP_WAITING"){t("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}if(e.data&&e.data.action==="getSharedImage"){t("クライアントに共有画像データを送信");const s=e.data.requestId||null;if(n)e.ports&&e.ports[0]?(e.ports[0].postMessage({type:"SHARED_IMAGE",data:n,requestId:s,timestamp:Date.now()}),t("MessageChannelでデータを送信")):a&&(a.postMessage({type:"SHARED_IMAGE",data:n,requestId:s,timestamp:Date.now()}),t("通常の応答でデータを送信")),t("送信したデータ:",n.image?.name,n.metadata),setTimeout(()=>{n=null,t("共有画像キャッシュをクリアしました")},3e4);else{t("共有画像キャッシュがありません");const d={type:"SHARED_IMAGE",data:null,requestId:s,error:"No shared image available",timestamp:Date.now()};e.ports&&e.ports[0]?e.ports[0].postMessage(d):a&&a.postMessage(d)}}})})();
