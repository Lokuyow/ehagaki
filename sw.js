(function(){"use strict";const e=(...t)=>console.log("[ServiceWorker]",...t),c=(...t)=>console.error("[ServiceWorker]",...t);let d=null;const g="assets-cache-v1",p=["/src/assets/image1.png","/src/assets/image2.jpg"];self.addEventListener("fetch",t=>{const a=t,s=new URL(a.request.url);if(e("リクエスト受信:",a.request.method,s.pathname),a.request.method==="POST"&&(s.pathname.endsWith("/upload")||s.pathname.includes("/ehagaki/upload"))){e("画像アップロードリクエストを受信しました",s.pathname),a.respondWith((async()=>{try{e("フォームデータを処理中...");const r=(await a.request.formData()).get("image");if(!r)return c("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);e("画像を受信しました:",r.name,`タイプ: ${r.type}`,`サイズ: ${Math.round(r.size/1024)}KB`),d={image:r,metadata:{name:r.name,type:r.type,size:r.size,timestamp:new Date().toISOString()}};try{await f(),e("IndexedDBに共有フラグを保存しました")}catch(n){c("IndexedDB保存エラー:",n)}const h=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(h.length>0){const n=h[0];e("既存のクライアントにフォーカス:",n.id);try{await n.focus();const o=(u=0)=>{try{n.postMessage({type:"SHARED_IMAGE",data:d,timestamp:Date.now(),retry:u}),e(`画像データ${u>0?"再":""}送信 (${u}回目)`)}catch(m){c("メッセージ送信エラー:",m)}};return o(),setTimeout(()=>o(1),1e3),setTimeout(()=>o(2),2e3),Response.redirect(new URL("/ehagaki/?shared=true",self.location.origin).href,303)}catch(o){return c("メッセージ送信エラー:",o),Response.redirect(new URL("/ehagaki/?shared=true&error=messaging",self.location.origin).href,303)}}else{e("クライアントがないので新規ウィンドウを開きます");try{const n=new URL("/ehagaki/?shared=true",self.location.origin).href;return e("新規ウィンドウを開きます:",n),await self.clients.openWindow(n)?(e("新しいウィンドウを開きました"),new Response("",{status:200,headers:{"Content-Type":"text/plain"}})):(c("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?shared=true&error=window",self.location.origin).href,303))}catch(n){return c("ウィンドウオープンエラー:",n),Response.redirect(new URL("/ehagaki/?shared=true&error=openWindow",self.location.origin).href,303)}}}catch(i){return c("画像処理エラー:",i),Response.redirect(new URL("/ehagaki/?shared=true&error=processing",self.location.origin).href,303)}})());return}if(s.pathname.startsWith("/src/assets/")){a.respondWith(caches.open(g).then(i=>i.match(a.request).then(r=>r?(e("assetsキャッシュヒット:",s.pathname),r):(e("assetsキャッシュミス:",s.pathname,"→ネットワーク取得"),fetch(a.request).then(h=>(i.put(a.request,h.clone()),h))))));return}});async function f(){return new Promise((t,a)=>{try{const s=indexedDB.open("eHagakiSharedData",1);s.onupgradeneeded=l=>{const i=l.target.result;i.objectStoreNames.contains("flags")||i.createObjectStore("flags",{keyPath:"id"})},s.onerror=()=>a(new Error("IndexedDB open failed")),s.onsuccess=l=>{try{const h=l.target.result.transaction(["flags"],"readwrite").objectStore("flags"),n={id:"sharedImage",timestamp:Date.now(),value:!0},o=h.put(n);o.onsuccess=()=>t(),o.onerror=()=>a(new Error("Failed to store shared flag"))}catch(i){a(i)}}}catch(s){a(s)}})}self.addEventListener("install",t=>{e("インストールされました"),t.waitUntil((async()=>{await self.skipWaiting();try{await(await caches.open(g)).addAll(p),e("assetsキャッシュ完了:",p)}catch(a){c("assetsキャッシュ失敗:",a)}})())}),self.addEventListener("activate",t=>{e("アクティブになりました - スコープ:",self.registration.scope),t.waitUntil(self.clients.claim())}),self.addEventListener("message",t=>{const a=t.source;if(e("メッセージ受信:",t.data?.action,"from client:",a?.id),t.data&&t.data.type==="SKIP_WAITING"){e("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}if(t.data&&t.data.action==="getSharedImage"){e("クライアントに共有画像データのリクエストを受信");const s=t.data.requestId||null,l={type:"SHARED_IMAGE",data:d,requestId:s,timestamp:Date.now()};t.ports&&t.ports[0]?(t.ports[0].postMessage(l),e("MessageChannelでデータを送信")):a&&(a.postMessage(l),e("通常の応答でデータを送信")),d?(e("送信したデータ:",d.image?.name,d.metadata),setTimeout(()=>{d=null,e("共有画像キャッシュをクリアしました")},3e4)):e("共有画像キャッシュがありません")}})})();
