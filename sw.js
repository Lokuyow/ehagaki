(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),o=(...e)=>console.error("[ServiceWorker]",...e);let s=null;self.addEventListener("fetch",e=>{const i=e,n=new URL(i.request.url);if(t("リクエスト受信:",i.request.method,n.pathname),i.request.method==="POST"&&(n.pathname.endsWith("/upload")||n.pathname.includes("/ehagaki/upload"))){t("画像アップロードリクエストを受信しました",n.pathname),i.respondWith((async()=>{try{t("フォームデータを処理中...");const a=(await i.request.formData()).get("image");if(!a)return o("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",a.name,`タイプ: ${a.type}`,`サイズ: ${Math.round(a.size/1024)}KB`),s={image:a,metadata:{name:a.name,type:a.type,size:a.size,timestamp:new Date().toISOString()}};const d=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(d.length>0){const r=d[0];t("既存のクライアントにフォーカス:",r.id);try{r.postMessage(s),t("クライアントに画像データを送信しました"),setTimeout(()=>{try{r.postMessage(s),t("画像データ再送信（1回目）")}catch(l){o("再送信エラー:",l)}},1e3)}catch(l){o("メッセージ送信エラー:",l)}return await r.focus(),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}else return t("クライアントがないので新規ウィンドウを開きます"),await self.clients.openWindow(new URL("/ehagaki/?shared=true",self.location.origin).href)?new Response("",{status:303,headers:{Location:new URL("/ehagaki/",self.location.origin).href}}):Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}catch(c){return o("画像処理エラー:",c),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}})());return}}),self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{if(t("メッセージ受信:",e.data),e.data&&e.data.type==="SKIP_WAITING"){t("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}e.data&&e.data.action==="getSharedImage"&&(t("クライアントに共有画像データを送信"),s?(e.ports&&e.ports[0]?(e.ports[0].postMessage(s),t("MessageChannelでデータを送信")):(e.source.postMessage(s),t("通常の応答でデータを送信")),t("送信したデータ:",s.metadata),setTimeout(()=>{s=null,t("共有画像キャッシュをクリアしました")},1e4)):(t("共有画像キャッシュがありません"),e.ports&&e.ports[0]?e.ports[0].postMessage(null):e.source&&e.source.postMessage({error:"No shared image available"})))})})();
