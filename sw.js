(function(){"use strict";const u="1.4.3",S=`ehagaki-cache-${u}`,g="ehagaki-profile-images",R="eHagakiSharedData",C=1,f=self.location.pathname.includes("/ehagaki/")?"/ehagaki":"";let m=[];try{m=[{"revision":"ec3736d92ab689be676751646681c7bd","url":"assets/en-DGQt_pRD.js"},{"revision":"6bfce017baeafc7ec420a81b8e9d5045","url":"assets/index-CoJ_Cpu1.js"},{"revision":"c9bdeb011f2846d15c053fd588ad2c32","url":"assets/index-DcssYhE4.css"},{"revision":"67153dcb6cbcbc5ec2245e305b35b52f","url":"assets/index.esm-B6zogCv1.js"},{"revision":"1e1ce09a1d5e2e2afc444920707baaf1","url":"assets/ja-BWSuQG_i.js"},{"revision":"2efb2b5d5ece06117f31e3945b05ae1a","url":"assets/workbox-window.prod.es5-CwtvwXb3.js"},{"revision":"06d715c59206b52f10ea2e5324602017","url":"index.html"},{"revision":"babe63f1867bfda88a54ea48714bacbf","url":"apple-touch-icon.png"},{"revision":"29bad677c14a3d64f60f0a3aa18d8457","url":"ehagaki_icon_circle.webp"},{"revision":"6fed39e02d6fc688225eddfb47cfd401","url":"ehagaki_icon_x192.png"},{"revision":"85177035c770f4dd3355b5575874a7e1","url":"ehagaki_icon_x512.png"},{"revision":"781b26f1ca16ee34e2a08db520649eb4","url":"ehagaki_icon.svg"},{"revision":"8565f947bbd349fec9860aa811536476","url":"ehagaki_icon.webp"},{"revision":"2bada714d92f8ac2c4775c7dd160ae4b","url":"ehagaki_ogp.webp"},{"revision":"80772041a3d7706a49eaf42dac91f5ad","url":"favicon.ico"},{"revision":"167bddd35a0ac0c3aaa141d18493fc0b","url":"maskable_icon_x192.png"},{"revision":"7df370b1e96677f8862bc129b565156d","url":"maskable_icon_x512.png"},{"revision":"7bc2c70c1c45f1665dd3eff02957c2fd","url":"icons/circle-info-solid-full.svg"},{"revision":"81b5daf7a062038ca927790a306a4f1d","url":"icons/circle-user-solid-full.svg"},{"revision":"bb07a82a78fb6c0880c35878d14c3fc9","url":"icons/copy-solid-full.svg"},{"revision":"cfe7c3589a1fd3dd297a0e12849d26f2","url":"icons/expand-solid-full.svg"},{"revision":"97a01045245952c64a77bf467c91a979","url":"icons/gear-solid-full.svg"},{"revision":"37d5908dc78c990de67476170ee51443","url":"icons/github-mark.svg"},{"revision":"26330813975ae0a2c805089b709b4275","url":"icons/image-solid-full.svg"},{"revision":"433f5bd2615322b08560d787c499dc3d","url":"icons/language-solid-full.svg"},{"revision":"b02a88451d35ed40d647402c53868871","url":"icons/nostr-login.svg"},{"revision":"2cb73309bb43ea470508684c229ec40f","url":"icons/paper-plane-solid-full.svg"},{"revision":"8cff7ee8121e2dbc6a5ce539a9020bb7","url":"icons/rotate-right-solid-full.svg"},{"revision":"5ece31773493febdbafeb032624e8b67","url":"icons/trash-solid-full.svg"},{"revision":"75b796fdf72212cf9fbfd5cfa133267f","url":"icons/xmark-solid-full.svg"},{"revision":"6fed39e02d6fc688225eddfb47cfd401","url":"ehagaki_icon_x192.png"},{"revision":"85177035c770f4dd3355b5575874a7e1","url":"ehagaki_icon_x512.png"},{"revision":"167bddd35a0ac0c3aaa141d18493fc0b","url":"maskable_icon_x192.png"},{"revision":"7df370b1e96677f8862bc129b565156d","url":"maskable_icon_x512.png"},{"revision":"67d3e60b539527c078fecb2f2faef9c4","url":"manifest.webmanifest"}]||[],m.length===0?console.warn("SW: Precache manifest is empty"):console.log(`SW: Precache manifest loaded with ${m.length} entries`)}catch(r){console.error("SW: Failed to load precache manifest:",r),m=[]}const d={sharedImageCache:null,precacheManifest:m,getSharedImageCache(){return this.sharedImageCache},setSharedImageCache(r){this.sharedImageCache=r},clearSharedImageCache(){this.sharedImageCache=null}},n={caches:self.caches,indexedDB:self.indexedDB,clients:self.clients,fetch:self.fetch.bind(self),console:self.console,location:self.location,navigator:self.navigator,setTimeout:self.setTimeout.bind(self)},W=new Uint8Array([137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,1,0,0,0,1,8,6,0,0,0,31,21,196,137,0,0,0,10,73,68,65,84,120,156,99,0,1,0,0,5,0,1,13,10,45,180,0,0,0,0,73,69,78,68,174,66,96,130]),i={createTransparentImageResponse(r=200){return new Response(W,{status:r,statusText:r===200?"OK":"Error",headers:{"Content-Type":"image/png","Cache-Control":r===200?"max-age=31536000":"no-cache","Access-Control-Allow-Origin":"*"}})},createCorsRequest(r,e={}){const a=e.mode||"cors",s=new Headers({Accept:"image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8",...e.headers||{}});return new Request(r,{method:"GET",headers:s,mode:a,credentials:"omit",cache:e.cache||"default",redirect:"follow",...e})},getBaseUrl(r){const e=new URL(r);return`${e.origin}${e.pathname}`},createRedirectResponse(r,e=null,a=n.location){const s=r.startsWith(f)?r:`${f}${r}`,t=new URL(s,a.origin);return e&&(t.searchParams.set("shared","true"),t.searchParams.set("error",e)),Response.redirect(t.href,303)},isUploadRequest(r,e){const a=`${f}/upload`;return r.method==="POST"&&(e.pathname.endsWith("/upload")||e.pathname.includes("/upload")||e.pathname===a)},isProfileImageRequest(r){return r.method!=="GET"?!1:new URL(r.url).searchParams.get("profile")==="true"},async extractImageFromFormData(r){const e=r.get("image");return e?{image:e,metadata:{name:e.name,type:e.type,size:e.size,timestamp:new Date().toISOString()}}:null}};class p{constructor(e=n){this.indexedDB=e.indexedDB,this.console=e.console}async executeOperation(e){return new Promise((a,s)=>{try{const t=this.indexedDB.open(R,C);t.onupgradeneeded=o=>{const c=o.target.result;c.objectStoreNames.contains("flags")||c.createObjectStore("flags",{keyPath:"id"})},t.onerror=()=>s(new Error("IndexedDB open failed")),t.onsuccess=o=>{const c=o.target.result;try{e(c,a,s)}catch(l){c.close(),s(l)}}}catch(t){s(t)}})}async saveSharedFlag(){return this.executeOperation((e,a,s)=>{const t=e.transaction(["flags"],"readwrite"),o=t.objectStore("flags");o.put({id:"sharedImage",timestamp:Date.now(),value:!0}).onsuccess=()=>{e.close(),a()},t.onerror=()=>{e.close(),s(new Error("Failed to store shared flag"))}})}async clearSharedFlag(){try{await this.executeOperation((e,a)=>{if(!e.objectStoreNames.contains("flags")){e.close(),a();return}const s=e.transaction(["flags"],"readwrite"),t=s.objectStore("flags");t.delete("sharedImage").onsuccess=()=>{e.close(),a()},s.onerror=()=>{e.close(),a()}})}catch(e){this.console.error("IndexedDB error:",e)}}}class I{constructor(e=n){this.caches=e.caches,this.fetch=e.fetch,this.console=e.console}async precacheResources(e){if(!e||e.length===0){this.console.warn("SW: No resources to precache");return}try{const a=await this.caches.open(S),s=e.map(t=>typeof t=="string"?t:t&&typeof t=="object"&&t.url?t.url:(this.console.warn("SW: Invalid manifest entry:",t),null)).filter(Boolean);if(s.length>0){for(let o=0;o<s.length;o+=10){const c=s.slice(o,o+10);try{await a.addAll(c),this.console.log(`SW: Cached batch ${Math.floor(o/10)+1}: ${c.length} resources`)}catch(l){this.console.error(`SW: Failed to cache batch ${Math.floor(o/10)+1}:`,l);for(const h of c)try{await a.add(h)}catch(w){this.console.error(`SW: Failed to cache individual resource: ${h}`,w)}}}this.console.log(`SW: Successfully cached ${s.length} resources`)}else this.console.warn("SW: No valid URLs to cache")}catch(a){this.console.error("SW: Precache error:",a)}}async cleanupOldCaches(){try{const e=await this.caches.keys();await Promise.all(e.map(a=>{if(a!==S&&a!==g)return this.caches.delete(a)}))}catch(e){this.console.error("キャッシュクリーンアップエラー:",e)}}async handleCacheFirst(e){try{const a=await this.caches.open(S);let s=await a.match(e);if(!s&&f&&e.url.includes(f)){const o=e.url.replace(f,""),c=new Request(o,e);s=await a.match(c)}if(s)return s;const t=await this.fetch(e);return t.ok&&e.method==="GET"&&await a.put(e,t.clone()),t}catch(a){return this.console.error("キャッシュ戦略エラー:",a),new Response("Not Found",{status:404})}}async handleProfileImageCache(e){try{const a=await this.caches.open(g),s=i.getBaseUrl(e.url),t=i.createCorsRequest(s,{mode:"no-cors"}),o=await a.match(t);if(o)return this.console.log("プロフィール画像をキャッシュから返却（ベースURL）:",s),o;const c=await a.match(e);return c?(this.console.log("プロフィール画像をキャッシュから返却（元URL）:",e.url),c):null}catch(a){return this.console.error("プロフィールキャッシュエラー:",a),null}}async fetchAndCacheProfileImage(e){if(n.navigator&&n.navigator.onLine===!1)return null;try{const a=i.getBaseUrl(e.url),s=i.createCorsRequest(a,{mode:"no-cors",headers:{"Cache-Control":"no-cache"},cache:"no-cache"});this.console.log("プロフィール画像をネットワークから取得中:",a);const t=await this.fetch(s);if(t&&(t.ok||t.type==="opaque")){const o=await this.caches.open(g),c=i.createCorsRequest(a,{mode:"no-cors"});try{await o.put(c,t.clone()),this.console.log("プロフィール画像をキャッシュに保存完了:",a)}catch(l){this.console.warn("プロフィール画像のキャッシュ保存に失敗:",l,a)}return t}else this.console.warn("プロフィール画像の取得に失敗または非OKレスポンス:",t&&t.type,t&&t.status,t&&t.statusText)}catch(a){this.console.log("プロフィール画像のネットワークエラー:",a&&a.message)}return null}async clearProfileCache(){try{const e=await this.caches.delete(g);return this.console.log("プロフィール画像キャッシュクリア:",e),{success:!0}}catch(e){return this.console.error("プロフィールキャッシュクリアエラー:",e),{success:!1,error:e.message}}}async cleanupDuplicateProfileCache(){try{const e=await this.caches.open(g),a=await e.keys(),s=new Set,t=[];a.forEach(c=>{const l=new URL(c.url),h=i.getBaseUrl(c.url);l.search?t.push(c):s.add(h)});let o=0;for(const c of t){const l=i.getBaseUrl(c.url);s.has(l)&&(await e.delete(c),o++,this.console.log("重複キャッシュを削除:",c.url))}return this.console.log(`重複プロフィールキャッシュクリーンアップ完了: ${o}件削除`),{success:!0,deletedCount:o}}catch(e){return this.console.error("重複キャッシュクリーンアップエラー:",e),{success:!1,error:e.message}}}}class y{constructor(e=n){this.clients=e.clients,this.console=e.console,this.location=e.location,this.setTimeout=e.setTimeout}async redirectClient(){try{const e=await this.clients.matchAll({type:"window",includeUncontrolled:!0});return e.length>0?await this.focusAndNotifyClient(e[0]):await this.openNewClient()}catch(e){return this.console.error("クライアント処理エラー:",e),i.createRedirectResponse("/","client-error",this.location)}}async focusAndNotifyClient(e){try{await e.focus();const a=d.getSharedImageCache();if(this.console.log("SW: Attempting to notify client",{hasClient:!!e,hasPostMessage:typeof e.postMessage=="function",hasSharedCache:!!a,clientId:e.id||"unknown"}),a)try{const s=new p;await this.persistSharedImageToIndexedDB(a,s),this.console.log("SW: Shared image persisted to IndexedDB for fallback")}catch(s){this.console.warn("SW: Failed to persist shared image to IndexedDB:",s)}if(e&&typeof e.postMessage=="function")try{e.postMessage({type:"SHARED_IMAGE",data:a,timestamp:Date.now(),requestId:`sw-${Date.now()}`}),this.console.log("SW: Message sent to client successfully")}catch(s){this.console.warn("SW: Failed to send message to client (will rely on IndexedDB fallback):",s)}return i.createRedirectResponse("/",null,this.location)}catch(a){return this.console.error("SW: Client focus/notification error:",a),i.createRedirectResponse("/","client-error",this.location)}}async persistSharedImageToIndexedDB(e,a){return a.executeOperation((s,t,o)=>{const c=s.transaction(["flags"],"readwrite"),l=c.objectStore("flags"),h={id:"sharedImageData",timestamp:Date.now(),data:{image:{name:e.image?.name,type:e.image?.type,size:e.image?.size,_isFile:!0},metadata:e.metadata}};e.image instanceof File?e.image.arrayBuffer().then(w=>{h.data.image.arrayBuffer=w,l.put(h).onsuccess=()=>{s.close(),t()}}).catch(w=>{s.close(),o(w)}):l.put(h).onsuccess=()=>{s.close(),t()},c.onerror=()=>{s.close(),o(new Error("Failed to persist shared image data"))}})}}class E{constructor(e=new p,a=n){this.indexedDBManager=e,this.console=a.console}respondSharedImage(e){const a=e.source,s=e.data.requestId||null,t=d.getSharedImageCache(),o={type:"SHARED_IMAGE",data:t,requestId:s,timestamp:Date.now()};e.ports?.[0]?e.ports[0].postMessage(o):a&&a.postMessage(o),t&&(d.clearSharedImageCache(),this.indexedDBManager.clearSharedFlag())}respondSharedImageForce(e){const a=e.source,s=e.data.requestId||null,t=d.getSharedImageCache();t||this.console.log("SW: No shared cache, client should try IndexedDB fallback");const o={type:"SHARED_IMAGE",data:t,requestId:s,timestamp:Date.now(),fallbackRequired:!t};e.ports?.[0]?e.ports[0].postMessage(o):a&&a.postMessage(o)}}class M{constructor(e=new I,a=new y,s=new p,t=n){this.cacheManager=e,this.clientManager=a,this.indexedDBManager=s,this.console=t.console,this.location=t.location}async handleUploadRequest(e){try{this.console.log("SW: Processing upload request",e.url);const a=await e.formData(),s=await i.extractImageFromFormData(a);if(!s)return this.console.warn("SW: No image data found in FormData"),i.createRedirectResponse("/","no-image",this.location);this.console.log("SW: Image data extracted successfully",{hasImage:!!s.image,imageType:s.image?.type,imageSize:s.image?.size,imageName:s.image?.name}),d.setSharedImageCache(s);try{await this.indexedDBManager.saveSharedFlag(),this.console.log("SW: Shared flag saved to IndexedDB")}catch(t){this.console.error("SW: IndexedDB save error:",t)}return await this.clientManager.redirectClient()}catch(a){return this.console.error("SW: Upload processing error:",a),i.createRedirectResponse("/","processing-error",this.location)}}async handleProfileImageRequest(e){try{this.console.log("プロフィール画像リクエスト処理開始:",e.url);const a=await this.cacheManager.handleProfileImageCache(e);if(a)return this.console.log("プロフィール画像をキャッシュから返却:",e.url),a;const s=await this.cacheManager.fetchAndCacheProfileImage(e);return s?(this.console.log("プロフィール画像をネットワークから返却:",e.url),s):(this.console.log("フォールバック画像を返却:",e.url),i.createTransparentImageResponse())}catch(a){return this.console.error("プロフィール画像処理エラー:",a),i.createTransparentImageResponse(404)}}}class D{constructor(){this.cacheManager=new I,this.indexedDBManager=new p,this.clientManager=new y,this.messageHandler=new E(this.indexedDBManager),this.requestHandler=new M(this.cacheManager,this.clientManager,this.indexedDBManager)}async handleInstall(e){n.console.log("SW installing...",u),await this.cacheManager.precacheResources(d.precacheManifest),n.console.log("SW installed, waiting for user action")}async handleActivate(e){n.console.log("SW activating...",u),await this.cacheManager.cleanupOldCaches(),await n.clients.claim()}async handleFetch(e){const a=new URL(e.request.url);return i.isUploadRequest(e.request,a)?(n.console.log("SW: 内部アップロードリクエストを処理",a.href),await this.requestHandler.handleUploadRequest(e.request)):i.isProfileImageRequest(e.request)?await this.requestHandler.handleProfileImageRequest(e.request):await this.cacheManager.handleCacheFirst(e.request)}async handleMessage(e){const a={SKIP_WAITING:()=>{n.console.log("SW received SKIP_WAITING, updating..."),self.skipWaiting()},GET_VERSION:()=>{e.ports?.[0]?.postMessage({version:u})},PING_TEST:()=>{const c={type:"PONG",timestamp:Date.now(),version:u};try{e.ports?.[0]?(e.ports[0].postMessage(c),n.console.log("SW: PING_TEST responded via MessageChannel")):e.source?(e.source.postMessage(c),n.console.log("SW: PING_TEST responded via source")):n.console.warn("SW: PING_TEST no response channel available")}catch(l){n.console.error("SW: PING_TEST response error:",l)}}},s={getSharedImage:()=>this.messageHandler.respondSharedImage(e),getSharedImageForce:()=>this.messageHandler.respondSharedImageForce(e),clearProfileCache:async()=>{const c=await this.cacheManager.clearProfileCache();e.ports?.[0]?.postMessage(c)},cleanupDuplicateProfileCache:async()=>{const c=await this.cacheManager.cleanupDuplicateProfileCache();e.ports?.[0]?.postMessage(c)}},{type:t,action:o}=e.data||{};t&&a[t]?a[t]():o&&s[o]&&await s[o]()}}const x=new D;self.addEventListener("install",r=>{r.waitUntil(x.handleInstall(r))}),self.addEventListener("activate",r=>{r.waitUntil(x.handleActivate(r))}),self.addEventListener("fetch",r=>{if(new URL(r.request.url),r.request.url.startsWith(self.location.origin)){const e=x.handleFetch(r);e!==void 0&&r.respondWith(e)}else i.isProfileImageRequest(r.request)&&(console.log("SW: 外部プロフィール画像リクエストを処理:",r.request.url),r.respondWith(x.requestHandler.handleProfileImageRequest(r.request)))}),self.addEventListener("message",r=>{x.handleMessage(r)}),typeof module<"u"&&module.exports&&(module.exports={ServiceWorkerCore:D,ServiceWorkerState:d,ServiceWorkerDependencies:n,Utilities:i,IndexedDBManager:p,CacheManager:I,ClientManager:y,MessageHandler:E,RequestHandler:M,PRECACHE_VERSION:u,PRECACHE_NAME:S,PROFILE_CACHE_NAME:g,INDEXEDDB_NAME:R,INDEXEDDB_VERSION:C})})();
