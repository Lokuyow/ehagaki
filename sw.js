(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),o=(...e)=>console.error("[ServiceWorker]",...e);let n=null;self.addEventListener("fetch",e=>{const i=e,s=new URL(i.request.url);if(t("リクエスト受信:",i.request.method,s.pathname),i.request.method==="POST"&&(s.pathname.endsWith("/upload")||s.pathname.includes("/ehagaki/upload"))){t("画像アップロードリクエストを受信しました",s.pathname),i.respondWith((async()=>{try{t("フォームデータを処理中...");const a=(await i.request.formData()).get("image");if(!a)return o("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",a.name,`タイプ: ${a.type}`,`サイズ: ${Math.round(a.size/1024)}KB`),n={image:a,metadata:{name:a.name,type:a.type,size:a.size,timestamp:new Date().toISOString()}};const c=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(c.length>0){const r=c[0];return t("既存のクライアントにフォーカス:",r.id),r.postMessage(n),await r.focus(),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}else return t("クライアントがないので新規ウィンドウを開きます"),await self.clients.openWindow(new URL("/ehagaki/?shared=true",self.location.origin).href)?new Response("",{status:303,headers:{Location:new URL("/ehagaki/",self.location.origin).href}}):Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}catch(l){return o("画像処理エラー:",l),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}})());return}}),self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{t("メッセージ受信:",e.data),e.data&&e.data.action==="getSharedImage"&&n&&(t("クライアントに共有画像データを送信"),e.ports[0].postMessage(n),n=null)})})();
