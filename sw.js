(function(){"use strict";const e=(...t)=>console.log("[ServiceWorker]",...t),d=(...t)=>console.error("[ServiceWorker]",...t);let l=null;const f="assets-cache-v1",g=self.__WB_MANIFEST||[];self.addEventListener("fetch",t=>{const a=t,s=new URL(a.request.url);if(e("リクエスト受信:",a.request.method,s.pathname),a.request.method==="POST"&&(s.pathname.endsWith("/upload")||s.pathname.includes("/ehagaki/upload"))){e("画像アップロードリクエストを受信しました",s.pathname),a.respondWith((async()=>{try{e("フォームデータを処理中...");const r=(await a.request.formData()).get("image");if(!r)return d("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);e("画像を受信しました:",r.name,`タイプ: ${r.type}`,`サイズ: ${Math.round(r.size/1024)}KB`),l={image:r,metadata:{name:r.name,type:r.type,size:r.size,timestamp:new Date().toISOString()}};try{await p(),e("IndexedDBに共有フラグを保存しました")}catch(n){d("IndexedDB保存エラー:",n)}const h=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(h.length>0){const n=h[0];e("既存のクライアントにフォーカス:",n.id);try{await n.focus();const c=(u=0)=>{try{n.postMessage({type:"SHARED_IMAGE",data:l,timestamp:Date.now(),retry:u}),e(`画像データ${u>0?"再":""}送信 (${u}回目)`)}catch(m){d("メッセージ送信エラー:",m)}};return c(),setTimeout(()=>c(1),1e3),setTimeout(()=>c(2),2e3),Response.redirect(new URL("/ehagaki/?shared=true",self.location.origin).href,303)}catch(c){return d("メッセージ送信エラー:",c),Response.redirect(new URL("/ehagaki/?shared=true&error=messaging",self.location.origin).href,303)}}else{e("クライアントがないので新規ウィンドウを開きます");try{const n=new URL("/ehagaki/?shared=true",self.location.origin).href;return e("新規ウィンドウを開きます:",n),await self.clients.openWindow(n)?(e("新しいウィンドウを開きました"),new Response("",{status:200,headers:{"Content-Type":"text/plain"}})):(d("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?shared=true&error=window",self.location.origin).href,303))}catch(n){return d("ウィンドウオープンエラー:",n),Response.redirect(new URL("/ehagaki/?shared=true&error=openWindow",self.location.origin).href,303)}}}catch(o){return d("画像処理エラー:",o),Response.redirect(new URL("/ehagaki/?shared=true&error=processing",self.location.origin).href,303)}})());return}if(s.pathname.startsWith("/assets/")){a.respondWith(caches.open(f).then(o=>o.match(a.request).then(r=>r?(e("assetsキャッシュヒット:",s.pathname),r):(e("assetsキャッシュミス:",s.pathname,"→ネットワーク取得"),fetch(a.request).then(h=>(o.put(a.request,h.clone()),h))))));return}});async function p(){return new Promise((t,a)=>{try{const s=indexedDB.open("eHagakiSharedData",1);s.onupgradeneeded=i=>{const o=i.target.result;o.objectStoreNames.contains("flags")||o.createObjectStore("flags",{keyPath:"id"})},s.onerror=()=>a(new Error("IndexedDB open failed")),s.onsuccess=i=>{try{const h=i.target.result.transaction(["flags"],"readwrite").objectStore("flags"),n={id:"sharedImage",timestamp:Date.now(),value:!0},c=h.put(n);c.onsuccess=()=>t(),c.onerror=()=>a(new Error("Failed to store shared flag"))}catch(o){a(o)}}}catch(s){a(s)}})}self.addEventListener("install",t=>{e("インストールされました"),t.waitUntil((async()=>{await self.skipWaiting();try{const a=await caches.open(f),s=g.map(i=>i.url||i);await a.addAll(s),e("assetsキャッシュ完了:",s)}catch(a){d("assetsキャッシュ失敗:",a)}})())}),self.addEventListener("activate",t=>{e("アクティブになりました - スコープ:",self.registration.scope),t.waitUntil(self.clients.claim())}),self.addEventListener("message",t=>{const a=t.source;if(e("メッセージ受信:",t.data?.action,"from client:",a?.id),t.data&&t.data.type==="SKIP_WAITING"){e("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}if(t.data&&t.data.action==="getSharedImage"){e("クライアントに共有画像データのリクエストを受信");const s=t.data.requestId||null,i={type:"SHARED_IMAGE",data:l,requestId:s,timestamp:Date.now()};t.ports&&t.ports[0]?(t.ports[0].postMessage(i),e("MessageChannelでデータを送信")):a&&(a.postMessage(i),e("通常の応答でデータを送信")),l?(e("送信したデータ:",l.image?.name,l.metadata),setTimeout(()=>{l=null,e("共有画像キャッシュをクリアしました")},3e4)):e("共有画像キャッシュがありません")}})})();
