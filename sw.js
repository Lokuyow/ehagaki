(function(){"use strict";const c="1.0.4",i=`ehagaki-cache-${c}`,u="eHagakiSharedData",h=1;let s=null;const l=[{"revision":null,"url":"assets/en-CcS9Yxxs.js"},{"revision":null,"url":"assets/index-3DGzqyE1.js"},{"revision":null,"url":"assets/index-C1BMtdc5.css"},{"revision":null,"url":"assets/index.esm-B6zogCv1.js"},{"revision":null,"url":"assets/ja-DKgjkJ8H.js"},{"revision":null,"url":"assets/workbox-window.prod.es5-CwtvwXb3.js"},{"revision":"d7cd6e01d70095ac3e5f5be17d642c8e","url":"index.html"},{"revision":"babe63f1867bfda88a54ea48714bacbf","url":"apple-touch-icon.png"},{"revision":"6fed39e02d6fc688225eddfb47cfd401","url":"ehagaki_icon_x192.png"},{"revision":"85177035c770f4dd3355b5575874a7e1","url":"ehagaki_icon_x512.png"},{"revision":"30c6f6c83bf97c29201e058c41157433","url":"ehagaki_icon.svg"},{"revision":"2bada714d92f8ac2c4775c7dd160ae4b","url":"ehagaki_ogp.webp"},{"revision":"80772041a3d7706a49eaf42dac91f5ad","url":"favicon.ico"},{"revision":"b28566e5a02ebd09645f50f4f896e9ac","url":"web-app-manifest-192x192.png"},{"revision":"01ea2ab3595565b1579b16fe92005890","url":"web-app-manifest-512x512.png"},{"revision":"b7c4e1df1ee4ac2162296f7fa9305656","url":"icons/circle-user-solid-full.svg"},{"revision":"97a01045245952c64a77bf467c91a979","url":"icons/gear-solid-full.svg"},{"revision":"37d5908dc78c990de67476170ee51443","url":"icons/github-mark.svg"},{"revision":"26330813975ae0a2c805089b709b4275","url":"icons/image-solid-full.svg"},{"revision":"433f5bd2615322b08560d787c499dc3d","url":"icons/language-solid-full.svg"},{"revision":"b02a88451d35ed40d647402c53868871","url":"icons/nostr-login.svg"},{"revision":"2cb73309bb43ea470508684c229ec40f","url":"icons/paper-plane-solid-full.svg"},{"revision":"8cff7ee8121e2dbc6a5ce539a9020bb7","url":"icons/rotate-right-solid-full.svg"},{"revision":"5ece31773493febdbafeb032624e8b67","url":"icons/trash-solid-full.svg"},{"revision":"75b796fdf72212cf9fbfd5cfa133267f","url":"icons/xmark-solid-full.svg"},{"revision":"88ade255e4a38c8480bd0e1b71b7f5ee","url":"manifest.webmanifest"}]||[];self.addEventListener("install",e=>{console.log("SW installing...",c),e.waitUntil((async()=>{if(l.length>0)try{const t=await caches.open(i),r=l.map(a=>a.url);await t.addAll(r),console.log("SW cached resources:",r.length)}catch(t){console.error("プリキャッシュエラー:",t)}console.log("SW installed, waiting for user action")})())}),self.addEventListener("activate",e=>{console.log("SW activating...",c),e.waitUntil((async()=>{try{const t=await caches.keys();await Promise.all(t.map(r=>r!==i?caches.delete(r):void 0)),await self.clients.claim()}catch(t){console.error("アクティベートエラー:",t)}})())}),self.addEventListener("fetch",e=>{const t=new URL(e.request.url);f(e.request,t)?e.respondWith(g(e.request)):t.origin===self.location.origin&&e.respondWith(y(e.request))}),self.addEventListener("message",e=>{if(e.data?.type==="SKIP_WAITING"){console.log("SW received SKIP_WAITING, updating..."),self.skipWaiting();return}if(e.data?.type==="GET_VERSION"){e.ports?.[0]?.postMessage({version:c});return}e.data?.action==="getSharedImage"&&I(e)});function f(e,t){return e.method==="POST"&&(t.pathname.endsWith("/upload")||t.pathname.includes("/ehagaki/upload"))}async function g(e){try{const r=(await e.formData()).get("image");return r?(s={image:r,metadata:{name:r.name,type:r.type,size:r.size,timestamp:new Date().toISOString()}},E().catch(a=>console.error("IndexedDB保存エラー:",a)),await p()):o("/ehagaki/","no-image")}catch(t){return console.error("アップロード処理エラー:",t),o("/ehagaki/","processing-error")}}async function p(){try{const e=await self.clients.matchAll({type:"window",includeUncontrolled:!0});return e.length>0?await w(e[0]):await m()}catch(e){return console.error("クライアント処理エラー:",e),o("/ehagaki/","client-error")}}async function w(e){try{await e.focus();for(let t=0;t<3;t++)setTimeout(()=>{try{e.postMessage({type:"SHARED_IMAGE",data:s,timestamp:Date.now(),retry:t})}catch(r){console.error(`メッセージ送信エラー (retry: ${t}):`,r)}},t*1e3);return o("/ehagaki/","success")}catch(t){return console.error("既存クライアント処理エラー:",t),o("/ehagaki/","messaging-error")}}async function m(){try{const e=new URL("/ehagaki/?shared=true",self.location.origin).href;return await self.clients.openWindow(e)?new Response("",{status:200,headers:{"Content-Type":"text/plain"}}):o("/ehagaki/","window-error")}catch(e){return console.error("新しいウィンドウ作成エラー:",e),o("/ehagaki/","open-window-error")}}async function y(e){try{const t=await caches.open(i),r=await t.match(e);if(r)return r;const a=await fetch(e);return a.ok&&e.method==="GET"&&await t.put(e,a.clone()),a}catch(t){return console.error("キャッシュ戦略エラー:",t),new Response("Not Found",{status:404})}}function o(e,t=null){const r=new URL(e,self.location.origin);return t&&(r.searchParams.set("shared","true"),r.searchParams.set("error",t)),Response.redirect(r.href,303)}async function E(){return new Promise((e,t)=>{try{const r=indexedDB.open(u,h);r.onupgradeneeded=a=>{const n=a.target.result;n.objectStoreNames.contains("flags")||n.createObjectStore("flags",{keyPath:"id"})},r.onerror=()=>t(new Error("IndexedDB open failed")),r.onsuccess=a=>{try{const n=a.target.result,d=n.transaction(["flags"],"readwrite"),S=d.objectStore("flags");S.put({id:"sharedImage",timestamp:Date.now(),value:!0}).onsuccess=()=>{n.close(),e()},d.onerror=()=>{n.close(),t(new Error("Failed to store shared flag"))}}catch(n){t(n)}}}catch(r){t(r)}})}function I(e){const t=e.source,r=e.data.requestId||null,a={type:"SHARED_IMAGE",data:s,requestId:r,timestamp:Date.now()};e.ports?.[0]?e.ports[0].postMessage(a):t&&t.postMessage(a),s&&setTimeout(()=>{s=null},3e4)}})();
