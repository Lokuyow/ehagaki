(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),c=(...e)=>console.error("[ServiceWorker]",...e);let d=null;self.addEventListener("fetch",e=>{const a=e,s=new URL(a.request.url);if(t("リクエスト受信:",a.request.method,s.pathname),a.request.method==="POST"&&(s.pathname.endsWith("/upload")||s.pathname.includes("/ehagaki/upload"))){t("画像アップロードリクエストを受信しました",s.pathname),a.respondWith((async()=>{try{t("フォームデータを処理中...");const n=(await a.request.formData()).get("image");if(!n)return c("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",n.name,`タイプ: ${n.type}`,`サイズ: ${Math.round(n.size/1024)}KB`),d={image:n,metadata:{name:n.name,type:n.type,size:n.size,timestamp:new Date().toISOString()}};try{await h(),t("IndexedDBに共有フラグを保存しました")}catch(r){c("IndexedDB保存エラー:",r)}const u=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(u.length>0){const r=u[0];t("既存のクライアントにフォーカス:",r.id);try{await r.focus();const o=(g=0)=>{try{r.postMessage({type:"SHARED_IMAGE",data:d,timestamp:Date.now(),retry:g}),t(`画像データ${g>0?"再":""}送信 (${g}回目)`)}catch(f){c("メッセージ送信エラー:",f)}};return o(),setTimeout(()=>o(1),1e3),setTimeout(()=>o(2),2e3),Response.redirect(new URL("/ehagaki/?shared=true",self.location.origin).href,303)}catch(o){return c("メッセージ送信エラー:",o),Response.redirect(new URL("/ehagaki/?shared=true&error=messaging",self.location.origin).href,303)}}else{t("クライアントがないので新規ウィンドウを開きます");try{const r=new URL("/ehagaki/?shared=true",self.location.origin).href;return t("新規ウィンドウを開きます:",r),await self.clients.openWindow(r)?(t("新しいウィンドウを開きました"),new Response("",{status:200,headers:{"Content-Type":"text/plain"}})):(c("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?shared=true&error=window",self.location.origin).href,303))}catch(r){return c("ウィンドウオープンエラー:",r),Response.redirect(new URL("/ehagaki/?shared=true&error=openWindow",self.location.origin).href,303)}}}catch(i){return c("画像処理エラー:",i),Response.redirect(new URL("/ehagaki/?shared=true&error=processing",self.location.origin).href,303)}})());return}});async function h(){return new Promise((e,a)=>{try{const s=indexedDB.open("eHagakiSharedData",1);s.onupgradeneeded=l=>{const i=l.target.result;i.objectStoreNames.contains("flags")||i.createObjectStore("flags",{keyPath:"id"})},s.onerror=()=>a(new Error("IndexedDB open failed")),s.onsuccess=l=>{try{const u=l.target.result.transaction(["flags"],"readwrite").objectStore("flags"),r={id:"sharedImage",timestamp:Date.now(),value:!0},o=u.put(r);o.onsuccess=()=>e(),o.onerror=()=>a(new Error("Failed to store shared flag"))}catch(i){a(i)}}}catch(s){a(s)}})}self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{const a=e.source;if(t("メッセージ受信:",e.data?.action,"from client:",a?.id),e.data&&e.data.type==="SKIP_WAITING"){t("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}if(e.data&&e.data.action==="getSharedImage"){t("クライアントに共有画像データのリクエストを受信");const s=e.data.requestId||null,l={type:"SHARED_IMAGE",data:d,requestId:s,timestamp:Date.now()};e.ports&&e.ports[0]?(e.ports[0].postMessage(l),t("MessageChannelでデータを送信")):a&&(a.postMessage(l),t("通常の応答でデータを送信")),d?(t("送信したデータ:",d.image?.name,d.metadata),setTimeout(()=>{d=null,t("共有画像キャッシュをクリアしました")},3e4)):t("共有画像キャッシュがありません")}})})();
