(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),o=(...e)=>console.error("[ServiceWorker]",...e);let s=null;self.addEventListener("fetch",e=>{const a=e,r=new URL(a.request.url);if(t("リクエスト受信:",a.request.method,r.pathname),a.request.method==="POST"&&(r.pathname.endsWith("/upload")||r.pathname.includes("/ehagaki/upload"))){t("画像アップロードリクエストを受信しました",r.pathname),a.respondWith((async()=>{try{t("フォームデータを処理中...");const i=(await a.request.formData()).get("image");if(!i)return o("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",i.name,`タイプ: ${i.type}`,`サイズ: ${Math.round(i.size/1024)}KB`),s={image:i,metadata:{name:i.name,type:i.type,size:i.size,timestamp:new Date().toISOString()}};const p=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(p.length>0){const n=p[0];t("既存のクライアントにフォーカス:",n.id);try{return await n.focus(),n.postMessage({type:"SHARED_IMAGE",data:s,timestamp:Date.now()}),t("クライアントに画像データを送信しました"),setTimeout(()=>{try{n.postMessage({type:"SHARED_IMAGE",data:s,timestamp:Date.now(),retry:1}),t("画像データ再送信（1回目）")}catch(l){o("再送信エラー:",l)}},1e3),setTimeout(()=>{try{n.postMessage({type:"SHARED_IMAGE",data:s,timestamp:Date.now(),retry:2}),t("画像データ再送信（2回目）")}catch(l){o("再送信エラー:",l)}},2e3),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)}catch(l){return o("メッセージ送信エラー:",l),Response.redirect(new URL("/ehagaki/?error=messaging",self.location.origin).href,303)}}else{t("クライアントがないので新規ウィンドウを開きます");try{return await self.clients.openWindow(new URL("/ehagaki/?shared=true",self.location.origin).href)?(t("新しいウィンドウを開きました"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303)):(o("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?error=window",self.location.origin).href,303))}catch(n){return o("ウィンドウオープンエラー:",n),Response.redirect(new URL("/ehagaki/?error=openWindow",self.location.origin).href,303)}}}catch(d){return o("画像処理エラー:",d),Response.redirect(new URL("/ehagaki/?error=processing",self.location.origin).href,303)}})());return}}),self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil(self.clients.claim())}),self.addEventListener("message",e=>{const a=e.source;if(t("メッセージ受信:",e.data?.action,"from client:",a?.id),e.data&&e.data.type==="SKIP_WAITING"){t("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}if(e.data&&e.data.action==="getSharedImage"){t("クライアントに共有画像データを送信");const r=e.data.requestId||null;if(s)e.ports&&e.ports[0]?(e.ports[0].postMessage({type:"SHARED_IMAGE",data:s,requestId:r,timestamp:Date.now()}),t("MessageChannelでデータを送信")):a&&(a.postMessage({type:"SHARED_IMAGE",data:s,requestId:r,timestamp:Date.now()}),t("通常の応答でデータを送信")),t("送信したデータ:",s.image?.name,s.metadata),setTimeout(()=>{s=null,t("共有画像キャッシュをクリアしました")},3e4);else{t("共有画像キャッシュがありません");const c={type:"SHARED_IMAGE",data:null,requestId:r,error:"No shared image available",timestamp:Date.now()};e.ports&&e.ports[0]?e.ports[0].postMessage(c):a&&a.postMessage(c)}}})})();
