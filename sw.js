(function(){"use strict";const d="1.4.0",p=`ehagaki-cache-${d}`,w="ehagaki-profile-images",W="eHagakiSharedData",y=1,l=(()=>{const e=self.location.pathname.match(/^(\/[^/]+)\/sw\.js$/);return e&&e[1]!==""?e[1]:""})();console.log("SW: BASE_PATH detected:",l,"from",self.location.pathname);let f=[];try{const r=[{"revision":"babe63f1867bfda88a54ea48714bacbf","url":"/ehagaki/apple-touch-icon.png"},{"revision":"ec3736d92ab689be676751646681c7bd","url":"/ehagaki/assets/en-DGQt_pRD.js"},{"revision":"207ef0aa44572cc7a0f971d6183dc470","url":"/ehagaki/assets/index-BGkPs4_G.css"},{"revision":"b9c63a8db3209fbdfd24f43d73764bd2","url":"/ehagaki/assets/index-C6AAXWft.js"},{"revision":"67153dcb6cbcbc5ec2245e305b35b52f","url":"/ehagaki/assets/index.esm-B6zogCv1.js"},{"revision":"1e1ce09a1d5e2e2afc444920707baaf1","url":"/ehagaki/assets/ja-BWSuQG_i.js"},{"revision":"2efb2b5d5ece06117f31e3945b05ae1a","url":"/ehagaki/assets/workbox-window.prod.es5-CwtvwXb3.js"},{"revision":"29bad677c14a3d64f60f0a3aa18d8457","url":"/ehagaki/ehagaki_icon_circle.webp"},{"revision":"6fed39e02d6fc688225eddfb47cfd401","url":"/ehagaki/ehagaki_icon_x192.png"},{"revision":"85177035c770f4dd3355b5575874a7e1","url":"/ehagaki/ehagaki_icon_x512.png"},{"revision":"781b26f1ca16ee34e2a08db520649eb4","url":"/ehagaki/ehagaki_icon.svg"},{"revision":"8565f947bbd349fec9860aa811536476","url":"/ehagaki/ehagaki_icon.webp"},{"revision":"2bada714d92f8ac2c4775c7dd160ae4b","url":"/ehagaki/ehagaki_ogp.webp"},{"revision":"80772041a3d7706a49eaf42dac91f5ad","url":"/ehagaki/favicon.ico"},{"revision":"7bc2c70c1c45f1665dd3eff02957c2fd","url":"/ehagaki/icons/circle-info-solid-full.svg"},{"revision":"81b5daf7a062038ca927790a306a4f1d","url":"/ehagaki/icons/circle-user-solid-full.svg"},{"revision":"bb07a82a78fb6c0880c35878d14c3fc9","url":"/ehagaki/icons/copy-solid-full.svg"},{"revision":"cfe7c3589a1fd3dd297a0e12849d26f2","url":"/ehagaki/icons/expand-solid-full.svg"},{"revision":"97a01045245952c64a77bf467c91a979","url":"/ehagaki/icons/gear-solid-full.svg"},{"revision":"37d5908dc78c990de67476170ee51443","url":"/ehagaki/icons/github-mark.svg"},{"revision":"26330813975ae0a2c805089b709b4275","url":"/ehagaki/icons/image-solid-full.svg"},{"revision":"433f5bd2615322b08560d787c499dc3d","url":"/ehagaki/icons/language-solid-full.svg"},{"revision":"b02a88451d35ed40d647402c53868871","url":"/ehagaki/icons/nostr-login.svg"},{"revision":"2cb73309bb43ea470508684c229ec40f","url":"/ehagaki/icons/paper-plane-solid-full.svg"},{"revision":"8cff7ee8121e2dbc6a5ce539a9020bb7","url":"/ehagaki/icons/rotate-right-solid-full.svg"},{"revision":"5ece31773493febdbafeb032624e8b67","url":"/ehagaki/icons/trash-solid-full.svg"},{"revision":"75b796fdf72212cf9fbfd5cfa133267f","url":"/ehagaki/icons/xmark-solid-full.svg"},{"revision":"2de847d1a2a1c3e52c1906a8569930fd","url":"/ehagaki/index.html"},{"revision":"cb4ae2f1d456008a99af7e37c18d0c9a","url":"/ehagaki/manifest.webmanifest"},{"revision":"167bddd35a0ac0c3aaa141d18493fc0b","url":"/ehagaki/maskable_icon_x192.png"},{"revision":"7df370b1e96677f8862bc129b565156d","url":"/ehagaki/maskable_icon_x512.png"},{"revision":"cb4ae2f1d456008a99af7e37c18d0c9a","url":"manifest.webmanifest"}]||[];console.log("SW: Raw manifest entries:",r.length),f=r.filter(e=>{const t=typeof e=="string"?e:e.url;return t==="/manifest.webmanifest"||t==="manifest.webmanifest"?(console.log("SW: Excluding root manifest:",t),!1):!0}).map(e=>{if(typeof e=="string")return{url:e.startsWith("/")&&!e.startsWith(l)&&l?`${l}${e}`:e,revision:null};if(e&&typeof e=="object"&&e.url){const t=e.url.startsWith("/")&&!e.url.startsWith(l)&&l?`${l}${e.url}`:e.url;return{...e,url:t}}return e}),console.log("SW: Processed manifest entries:",f.length),console.log("SW: First 3 manifest entries:",f.slice(0,3))}catch(r){console.error("SW: Failed to load precache manifest:",r),f=[]}const m={sharedImageCache:null,precacheManifest:f,getSharedImageCache(){return this.sharedImageCache},setSharedImageCache(r){this.sharedImageCache=r},clearSharedImageCache(){this.sharedImageCache=null}},i={caches:self.caches,indexedDB:self.indexedDB,clients:self.clients,fetch:self.fetch.bind(self),console:self.console,location:self.location,navigator:self.navigator,setTimeout:self.setTimeout.bind(self)},P=new Uint8Array([137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,1,0,0,0,1,8,6,0,0,0,31,21,196,137,0,0,0,10,73,68,65,84,120,156,99,0,1,0,0,5,0,1,13,10,45,180,0,0,0,0,73,69,78,68,174,66,96,130]),g={createTransparentImageResponse(r=200){return new Response(P,{status:r,statusText:r===200?"OK":"Error",headers:{"Content-Type":"image/png","Cache-Control":r===200?"max-age=31536000":"no-cache","Access-Control-Allow-Origin":"*"}})},createCorsRequest(r,e={}){const t=e.mode||"cors",s=new Headers({Accept:"image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8",...e.headers||{}});return new Request(r,{method:"GET",headers:s,mode:t,credentials:"omit",cache:e.cache||"default",redirect:"follow",...e})},getBaseUrl(r){const e=new URL(r);return`${e.origin}${e.pathname}`},createRedirectResponse(r,e=null,t=i.location){const s=r.startsWith(l)?r:`${l}${r}`,a=new URL(s,t.origin);return e&&(a.searchParams.set("shared","true"),a.searchParams.set("error",e)),Response.redirect(a.href,303)},isUploadRequest(r,e){const t=`${l}/upload`;return r.method==="POST"&&(e.pathname.endsWith("/upload")||e.pathname.includes("/upload")||e.pathname===t)},isProfileImageRequest(r){return r.method!=="GET"?!1:new URL(r.url).searchParams.get("profile")==="true"},async extractImageFromFormData(r){const e=r.get("image");return e?{image:e,metadata:{name:e.name,type:e.type,size:e.size,timestamp:new Date().toISOString()}}:null}};class x{constructor(e=i){this.indexedDB=e.indexedDB,this.console=e.console}async executeOperation(e){return new Promise((t,s)=>{try{const a=this.indexedDB.open(W,y);a.onupgradeneeded=c=>{const o=c.target.result;o.objectStoreNames.contains("flags")||o.createObjectStore("flags",{keyPath:"id"})},a.onerror=()=>s(new Error("IndexedDB open failed")),a.onsuccess=c=>{const o=c.target.result;try{e(o,t,s)}catch(n){o.close(),s(n)}}}catch(a){s(a)}})}async saveSharedFlag(){return this.executeOperation((e,t,s)=>{const a=e.transaction(["flags"],"readwrite"),c=a.objectStore("flags");c.put({id:"sharedImage",timestamp:Date.now(),value:!0}).onsuccess=()=>{e.close(),t()},a.onerror=()=>{e.close(),s(new Error("Failed to store shared flag"))}})}async clearSharedFlag(){try{await this.executeOperation((e,t)=>{if(!e.objectStoreNames.contains("flags")){e.close(),t();return}const s=e.transaction(["flags"],"readwrite"),a=s.objectStore("flags");a.delete("sharedImage").onsuccess=()=>{e.close(),t()},s.onerror=()=>{e.close(),t()}})}catch(e){this.console.error("IndexedDB error:",e)}}}class R{constructor(e=i){this.caches=e.caches,this.fetch=e.fetch,this.console=e.console}async precacheResources(e){if(!e||e.length===0){this.console.warn("SW: No resources to precache");return}try{const t=await this.caches.open(p),s=e.map(o=>typeof o=="string"?{url:o,revision:null}:o&&typeof o=="object"&&o.url?o:(this.console.warn("SW: Invalid manifest entry:",o),null)).filter(Boolean);if(s.length===0){this.console.warn("SW: No valid entries to cache");return}this.console.log("SW: Starting to cache",s.length,"resources");let a=0,c=0;for(const o of s){const n=o.url;try{const h=new URL(n,self.location.origin).href;this.console.log(`SW: Fetching: ${h}`);const u=await this.fetch(h);u.ok?(await t.put(h,u),a++,this.console.log(`SW: ✓ Cached: ${n}`)):(c++,this.console.error(`SW: ✗ Failed (${u.status}): ${n}`))}catch(h){c++,this.console.error(`SW: ✗ Error caching ${n}:`,h.message)}}this.console.log(`SW: Precache complete. Success: ${a}, Failed: ${c}`),c>0&&c>a&&this.console.error(`SW: Too many failures (${c}/${s.length}). Check manifest URLs.`)}catch(t){this.console.error("SW: Precache error:",t)}}async cleanupOldCaches(){try{const e=await this.caches.keys();await Promise.all(e.map(t=>{if(t!==p&&t!==w)return this.caches.delete(t)}))}catch(e){this.console.error("キャッシュクリーンアップエラー:",e)}}async handleCacheFirst(e){try{const t=await this.caches.open(p),s=new URL(e.url);if(e.headers.get("accept")?.includes("text/html")||s.pathname.endsWith("/")||s.pathname===l||s.pathname===`${l}/`){const n=[`${l}/index.html`,`${l}/`,"/index.html","/"];for(const h of n){const u=new Request(new URL(h,self.location.origin).href,e),I=await t.match(u,{ignoreSearch:!0});if(I)return this.console.log("SW: HTML cache hit:",h),I}}let c=await t.match(e,{ignoreSearch:!0});if(c)return this.console.log("SW: Cache hit (original):",e.url),c;if(l){let n;if(s.pathname.startsWith(l)?n=s.pathname.replace(l,""):n=`${l}${s.pathname}`,n){const h=new Request(new URL(n+s.search,s.origin).href,e);if(c=await t.match(h,{ignoreSearch:!0}),c)return this.console.log("SW: Cache hit (alternate):",h.url),c}}this.console.log("SW: Cache miss, fetching from network:",e.url);const o=await this.fetch(e);return o.ok&&e.method==="GET"&&(await t.put(e,o.clone()),this.console.log("SW: Cached new resource:",e.url)),o}catch(t){if(this.console.error("SW: Cache strategy error:",t),new URL(e.url),e.headers.get("accept")?.includes("text/html"))try{const a=await this.caches.open(p),c=`${l}/index.html`,o=new Request(new URL(c,self.location.origin).href),n=await a.match(o);if(n)return this.console.log("SW: Returning cached index.html as fallback"),n}catch(a){this.console.error("SW: Fallback error:",a)}return new Response("Not Found",{status:404})}}async handleProfileImageCache(e){try{const t=await this.caches.open(w),s=g.getBaseUrl(e.url),a=g.createCorsRequest(s,{mode:"no-cors"}),c=await t.match(a);if(c)return this.console.log("プロフィール画像をキャッシュから返却（ベースURL）:",s),c;const o=await t.match(e);return o?(this.console.log("プロフィール画像をキャッシュから返却（元URL）:",e.url),o):null}catch(t){return this.console.error("プロフィールキャッシュエラー:",t),null}}async fetchAndCacheProfileImage(e){if(i.navigator&&i.navigator.onLine===!1)return null;try{const t=g.getBaseUrl(e.url),s=g.createCorsRequest(t,{mode:"no-cors",headers:{"Cache-Control":"no-cache"},cache:"no-cache"});this.console.log("プロフィール画像をネットワークから取得中:",t);const a=await this.fetch(s);if(a&&(a.ok||a.type==="opaque")){const c=await this.caches.open(w),o=g.createCorsRequest(t,{mode:"no-cors"});try{await c.put(o,a.clone()),this.console.log("プロフィール画像をキャッシュに保存完了:",t)}catch(n){this.console.warn("プロフィール画像のキャッシュ保存に失敗:",n,t)}return a}else this.console.warn("プロフィール画像の取得に失敗または非OKレスポンス:",a&&a.type,a&&a.status,a&&a.statusText)}catch(t){this.console.log("プロフィール画像のネットワークエラー:",t&&t.message)}return null}async clearProfileCache(){try{const e=await this.caches.delete(w);return this.console.log("プロフィール画像キャッシュクリア:",e),{success:!0}}catch(e){return this.console.error("プロフィールキャッシュクリアエラー:",e),{success:!1,error:e.message}}}async cleanupDuplicateProfileCache(){try{const e=await this.caches.open(w),t=await e.keys(),s=new Set,a=[];t.forEach(o=>{const n=new URL(o.url),h=g.getBaseUrl(o.url);n.search?a.push(o):s.add(h)});let c=0;for(const o of a){const n=g.getBaseUrl(o.url);s.has(n)&&(await e.delete(o),c++,this.console.log("重複キャッシュを削除:",o.url))}return this.console.log(`重複プロフィールキャッシュクリーンアップ完了: ${c}件削除`),{success:!0,deletedCount:c}}catch(e){return this.console.error("重複キャッシュクリーンアップエラー:",e),{success:!1,error:e.message}}}}class C{constructor(e=i){this.clients=e.clients,this.console=e.console,this.location=e.location,this.setTimeout=e.setTimeout}async redirectClient(){try{const e=await this.clients.matchAll({type:"window",includeUncontrolled:!0});return e.length>0?await this.focusAndNotifyClient(e[0]):await this.openNewClient()}catch(e){return this.console.error("クライアント処理エラー:",e),g.createRedirectResponse("/","client-error",this.location)}}async focusAndNotifyClient(e){try{await e.focus();const t=m.getSharedImageCache();if(this.console.log("SW: Attempting to notify client",{hasClient:!!e,hasPostMessage:typeof e.postMessage=="function",hasSharedCache:!!t,clientId:e.id||"unknown"}),t)try{const s=new x;await this.persistSharedImageToIndexedDB(t,s),this.console.log("SW: Shared image persisted to IndexedDB for fallback")}catch(s){this.console.warn("SW: Failed to persist shared image to IndexedDB:",s)}if(e&&typeof e.postMessage=="function")try{e.postMessage({type:"SHARED_IMAGE",data:t,timestamp:Date.now(),requestId:`sw-${Date.now()}`}),this.console.log("SW: Message sent to client successfully")}catch(s){this.console.warn("SW: Failed to send message to client (will rely on IndexedDB fallback):",s)}return g.createRedirectResponse("/",null,this.location)}catch(t){return this.console.error("SW: Client focus/notification error:",t),g.createRedirectResponse("/","client-error",this.location)}}async persistSharedImageToIndexedDB(e,t){return t.executeOperation((s,a,c)=>{const o=s.transaction(["flags"],"readwrite"),n=o.objectStore("flags"),h={id:"sharedImageData",timestamp:Date.now(),data:{image:{name:e.image?.name,type:e.image?.type,size:e.image?.size,_isFile:!0},metadata:e.metadata}};e.image instanceof File?e.image.arrayBuffer().then(u=>{h.data.image.arrayBuffer=u,n.put(h).onsuccess=()=>{s.close(),a()}}).catch(u=>{s.close(),c(u)}):n.put(h).onsuccess=()=>{s.close(),a()},o.onerror=()=>{s.close(),c(new Error("Failed to persist shared image data"))}})}}class E{constructor(e=new x,t=i){this.indexedDBManager=e,this.console=t.console}respondSharedImage(e){const t=e.source,s=e.data.requestId||null,a=m.getSharedImageCache(),c={type:"SHARED_IMAGE",data:a,requestId:s,timestamp:Date.now()};e.ports?.[0]?e.ports[0].postMessage(c):t&&t.postMessage(c),a&&(m.clearSharedImageCache(),this.indexedDBManager.clearSharedFlag())}respondSharedImageForce(e){const t=e.source,s=e.data.requestId||null,a=m.getSharedImageCache();a||this.console.log("SW: No shared cache, client should try IndexedDB fallback");const c={type:"SHARED_IMAGE",data:a,requestId:s,timestamp:Date.now(),fallbackRequired:!a};e.ports?.[0]?e.ports[0].postMessage(c):t&&t.postMessage(c)}}class M{constructor(e=new R,t=new C,s=new x,a=i){this.cacheManager=e,this.clientManager=t,this.indexedDBManager=s,this.console=a.console,this.location=a.location}async handleUploadRequest(e){try{this.console.log("SW: Processing upload request",e.url);const t=await e.formData(),s=await g.extractImageFromFormData(t);if(!s)return this.console.warn("SW: No image data found in FormData"),g.createRedirectResponse("/","no-image",this.location);this.console.log("SW: Image data extracted successfully",{hasImage:!!s.image,imageType:s.image?.type,imageSize:s.image?.size,imageName:s.image?.name}),m.setSharedImageCache(s);try{await this.indexedDBManager.saveSharedFlag(),this.console.log("SW: Shared flag saved to IndexedDB")}catch(a){this.console.error("SW: IndexedDB save error:",a)}return await this.clientManager.redirectClient()}catch(t){return this.console.error("SW: Upload processing error:",t),g.createRedirectResponse("/","processing-error",this.location)}}async handleProfileImageRequest(e){try{this.console.log("プロフィール画像リクエスト処理開始:",e.url);const t=await this.cacheManager.handleProfileImageCache(e);if(t)return this.console.log("プロフィール画像をキャッシュから返却:",e.url),t;const s=await this.cacheManager.fetchAndCacheProfileImage(e);return s?(this.console.log("プロフィール画像をネットワークから返却:",e.url),s):(this.console.log("フォールバック画像を返却:",e.url),g.createTransparentImageResponse())}catch(t){return this.console.error("プロフィール画像処理エラー:",t),g.createTransparentImageResponse(404)}}}class D{constructor(){this.cacheManager=new R,this.indexedDBManager=new x,this.clientManager=new C,this.messageHandler=new E(this.indexedDBManager),this.requestHandler=new M(this.cacheManager,this.clientManager,this.indexedDBManager)}async handleInstall(e){i.console.log("SW installing...",d),await this.cacheManager.precacheResources(m.precacheManifest),i.console.log("SW installed, waiting for user action")}async handleActivate(e){i.console.log("SW activating...",d),await this.cacheManager.cleanupOldCaches(),await i.clients.claim()}async handleFetch(e){const t=new URL(e.request.url);return g.isUploadRequest(e.request,t)?(i.console.log("SW: 内部アップロードリクエストを処理",t.href),await this.requestHandler.handleUploadRequest(e.request)):g.isProfileImageRequest(e.request)?await this.requestHandler.handleProfileImageRequest(e.request):await this.cacheManager.handleCacheFirst(e.request)}async handleMessage(e){const t={SKIP_WAITING:()=>{i.console.log("SW received SKIP_WAITING, updating..."),self.skipWaiting()},GET_VERSION:()=>{e.ports?.[0]?.postMessage({version:d})},PING_TEST:()=>{const o={type:"PONG",timestamp:Date.now(),version:d};try{e.ports?.[0]?(e.ports[0].postMessage(o),i.console.log("SW: PING_TEST responded via MessageChannel")):e.source?(e.source.postMessage(o),i.console.log("SW: PING_TEST responded via source")):i.console.warn("SW: PING_TEST no response channel available")}catch(n){i.console.error("SW: PING_TEST response error:",n)}},DEBUG_CACHE:async()=>{try{const h=(await(await this.cacheManager.caches.open(p)).keys()).map(I=>I.url),u={version:d,basePath:l,manifestLength:f.length,manifestSample:f.slice(0,5),cachedUrls:h,cachedCount:h.length,location:self.location.href,origin:self.location.origin};e.ports?.[0]?e.ports[0].postMessage(u):e.source&&e.source.postMessage(u),i.console.log("SW: Cache debug info:",u)}catch(o){i.console.error("SW: Debug cache error:",o),e.ports?.[0]&&e.ports[0].postMessage({error:o.message})}}},s={getSharedImage:()=>this.messageHandler.respondSharedImage(e),getSharedImageForce:()=>this.messageHandler.respondSharedImageForce(e),clearProfileCache:async()=>{const o=await this.cacheManager.clearProfileCache();e.ports?.[0]?.postMessage(o)},cleanupDuplicateProfileCache:async()=>{const o=await this.cacheManager.cleanupDuplicateProfileCache();e.ports?.[0]?.postMessage(o)}},{type:a,action:c}=e.data||{};a&&t[a]?t[a]():c&&s[c]&&await s[c]()}}const S=new D;self.addEventListener("install",r=>{console.log("SW: Install event triggered for version",d),r.waitUntil(S.handleInstall(r).then(()=>(console.log("SW: Install completed, calling skipWaiting"),self.skipWaiting())))}),self.addEventListener("activate",r=>{console.log("SW: Activate event triggered for version",d),r.waitUntil(S.handleActivate(r).then(()=>(console.log("SW: Activate completed, claiming clients"),self.clients.claim())))}),self.addEventListener("fetch",r=>{if(new URL(r.request.url),r.request.url.startsWith(self.location.origin)){const e=S.handleFetch(r);e!==void 0&&r.respondWith(e)}else g.isProfileImageRequest(r.request)&&(console.log("SW: 外部プロフィール画像リクエストを処理:",r.request.url),r.respondWith(S.requestHandler.handleProfileImageRequest(r.request)))}),self.addEventListener("message",r=>{S.handleMessage(r)}),typeof module<"u"&&module.exports&&(module.exports={ServiceWorkerCore:D,ServiceWorkerState:m,ServiceWorkerDependencies:i,Utilities:g,IndexedDBManager:x,CacheManager:R,ClientManager:C,MessageHandler:E,RequestHandler:M,PRECACHE_VERSION:d,PRECACHE_NAME:p,PROFILE_CACHE_NAME:w,INDEXEDDB_NAME:W,INDEXEDDB_VERSION:y})})();
