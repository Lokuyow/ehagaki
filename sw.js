(function(){"use strict";const t=(...e)=>console.log("[ServiceWorker]",...e),i=(...e)=>console.error("[ServiceWorker]",...e);let l=null;const h="ehagaki-cache-v0.1.3",f=[{"revision":null,"url":"assets/en-BmSzfbsb.js"},{"revision":null,"url":"assets/index-BzJ-VhaL.css"},{"revision":null,"url":"assets/index-CUQtVxZA.js"},{"revision":null,"url":"assets/ja-CyUrrMf_.js"},{"revision":"8ff9eca0407b9407805ca463b9a94c04","url":"index.html"},{"revision":"8eb63de4f91d4fd83cd1bb6e20414ce3","url":"registerSW.js"},{"revision":"72cb1a250c643f80d5eb582a77786d9d","url":"hagaki_2mai.png"},{"revision":"b7c4e1df1ee4ac2162296f7fa9305656","url":"icons/circle-user-solid-full.svg"},{"revision":"97a01045245952c64a77bf467c91a979","url":"icons/gear-solid-full.svg"},{"revision":"26330813975ae0a2c805089b709b4275","url":"icons/image-solid-full.svg"},{"revision":"0db89f4cdf2bcdabb6d369d82c013a97","url":"icons/language-solid.svg"},{"revision":"7569a819cc451dcfb3503e060b316838","url":"manifest.webmanifest"}];if(f&&f.length>0){const e=h;self.addEventListener("install",r=>{t("インストールされました - プリキャッシュ開始"),r.waitUntil((async()=>{try{const n=await caches.open(e),s=f.map(a=>a.url);await n.addAll(s),t("プリキャッシュ完了:",s)}catch(n){i("プリキャッシュ失敗:",n)}await self.skipWaiting()})())})}self.addEventListener("fetch",e=>{const r=new URL(e.request.url);e.request.method==="POST"&&(r.pathname.endsWith("/upload")||r.pathname.includes("/ehagaki/upload"))?e.respondWith((async()=>{t("画像アップロードリクエストをWorkboxで処理します",e.request.url);try{t("フォームデータを処理中...");const a=(await e.request.formData()).get("image");if(!a)return i("画像データがありません"),Response.redirect(new URL("/ehagaki/",self.location.origin).href,303);t("画像を受信しました:",a.name,`タイプ: ${a.type}`,`サイズ: ${Math.round(a.size/1024)}KB`),l={image:a,metadata:{name:a.name,type:a.type,size:a.size,timestamp:new Date().toISOString()}};try{await g(),t("IndexedDBに共有フラグを保存しました")}catch(o){i("IndexedDB保存エラー:",o)}const d=await self.clients.matchAll({type:"window",includeUncontrolled:!0});if(d.length>0){const o=d[0];t("既存のクライアントにフォーカス:",o.id);try{await o.focus();const c=(u=0)=>{try{o.postMessage({type:"SHARED_IMAGE",data:l,timestamp:Date.now(),retry:u}),t(`画像データ${u>0?"再":""}送信 (${u}回目)`)}catch(p){i("メッセージ送信エラー:",p)}};return c(),setTimeout(()=>c(1),1e3),setTimeout(()=>c(2),2e3),Response.redirect(new URL("/ehagaki/?shared=true",self.location.origin).href,303)}catch(c){return i("メッセージ送信エラー:",c),Response.redirect(new URL("/ehagaki/?shared=true&error=messaging",self.location.origin).href,303)}}else{t("クライアントがないので新規ウィンドウを開きます");try{const o=new URL("/ehagaki/?shared=true",self.location.origin).href;return t("新規ウィンドウを開きます:",o),await self.clients.openWindow(o)?(t("新しいウィンドウを開きました"),new Response("",{status:200,headers:{"Content-Type":"text/plain"}})):(i("新しいウィンドウを開けませんでした"),Response.redirect(new URL("/ehagaki/?shared=true&error=window",self.location.origin).href,303))}catch(o){return i("ウィンドウオープンエラー:",o),Response.redirect(new URL("/ehagaki/?shared=true&error=openWindow",self.location.origin).href,303)}}}catch(s){return i("画像処理エラー:",s),Response.redirect(new URL("/ehagaki/?shared=true&error=processing",self.location.origin).href,303)}})()):r.origin===self.location.origin?e.respondWith((async()=>{try{const s=await caches.open(h),a=await s.match(e.request);if(a)return t("キャッシュからレスポンス:",e.request.url),a;t("ネットワークからフェッチ:",e.request.url);const d=await fetch(e.request);if(d.ok&&e.request.method==="GET"){const o=d.clone();await s.put(e.request,o),t("ネットワーク応答をキャッシュに保存:",e.request.url)}return d}catch(s){return s("フェッチエラー:",e.request.url,s),new Response("Not Found",{status:404})}})()):e.respondWith(fetch(e.request))});async function g(){return new Promise((e,r)=>{try{const n=indexedDB.open("eHagakiSharedData",1);n.onupgradeneeded=s=>{const a=s.target.result;a.objectStoreNames.contains("flags")||a.createObjectStore("flags",{keyPath:"id"})},n.onerror=()=>r(new Error("IndexedDB open failed")),n.onsuccess=s=>{try{const o=s.target.result.transaction(["flags"],"readwrite").objectStore("flags"),c={id:"sharedImage",timestamp:Date.now(),value:!0},u=o.put(c);u.onsuccess=()=>e(),u.onerror=()=>r(new Error("Failed to store shared flag"))}catch(a){r(a)}}}catch(n){r(n)}})}self.addEventListener("install",e=>{t("インストールされました"),e.waitUntil(self.skipWaiting())}),self.addEventListener("activate",e=>{t("アクティブになりました - スコープ:",self.registration.scope),e.waitUntil((async()=>{const r=[h],n=await caches.keys();await Promise.all(n.map(s=>{if(!r.includes(s))return t("不要なキャッシュを削除:",s),caches.delete(s)})),await self.clients.claim()})())}),self.addEventListener("message",e=>{const r=e.source;if(t("メッセージ受信:",e.data?.action,"from client:",r?.id),e.data&&e.data.type==="SKIP_WAITING"){t("SKIP_WAITINGを受信、skipWaiting実行"),self.skipWaiting();return}if(e.data&&e.data.action==="getSharedImage"){t("クライアントに共有画像データのリクエストを受信");const n=e.data.requestId||null,s={type:"SHARED_IMAGE",data:l,requestId:n,timestamp:Date.now()};e.ports&&e.ports[0]?(e.ports[0].postMessage(s),t("MessageChannelでデータを送信")):r&&(r.postMessage(s),t("通常の応答でデータを送信")),l?(t("送信したデータ:",l.image?.name,l.metadata),setTimeout(()=>{l=null,t("共有画像キャッシュをクリアしました")},3e4)):t("共有画像キャッシュがありません")}})})();
